status,issue,primary finding,title,validator 1 comment,validator 2 comment,merged root cause
Satisfactory,findings-12,findings-12,Malicious user can honeypot other users by withdrawing his vested amount right before he sells his NFT,Low QA and beyond the control of the protocol,Claim liquidity before sale. QA at best + overinflated,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Satisfactory,validation-519,findings-12,Malicious user can honeypot NFT buyer by claiming all vested amounts before sale,Low QA and beyond the control of the protocol,Claim liquidity before sale. QA at best + overinflated,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Satisfactory,findings-21,findings-42,Improper `_whitelistIndex` check in the `Whitelist.checkWhitelist()` function.,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,findings-42,findings-42,Vultisig whitelisting can be bypassed by anyone,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-11,findings-42,User who is not whitelisted can still buy VULT token from Uniswap pool,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-122,findings-42,Flaw in Whitelist.sol: Unauthorized Users Can Bypass Whitelist Check and Receive Funds,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-151,findings-42,Improper validation of whitelist member inside  `checkWhitelist()` which leads to non whitelist member to contribute,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-179,findings-42,Non-whitelisted users will still pass the whitelist check ,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-210,findings-42,"Anyone can buy tokens, without being within the whitelist",Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-238,findings-42,Whitelist check can be bypassed by any non-whitelisted address because it does not check if `to` is in whiltelist.,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-253,findings-42,Whitelist doesn't work as intended,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-263,findings-42,Non-whitelisted addresses can also buy liquidity and claim VULT token,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-283,findings-42,Any address that is not registered in `_whitelistIndex` can pass the `checkWhitelist()` as long as it is not in the blacklist,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-325,findings-42,Token can be transfered to non-whitelisted because of wrong input validation,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-326,findings-42,"checkWhitelist() is broken, causing non-whitelisted user to have token",Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-359,findings-42,Incorrect whitelist validation in the `checkWhitelist` function allows non-whitelisted users to bypass whitelisting.,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-385,findings-42,Non whitelisted addresses can bypass `Whitelist::checkWhitelist` and swap VULT tokens from pool,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-39,findings-42,`checkWhitelist()` function does not revert when the checked address is not whitelisted,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-393,findings-42,Whitelist can be bypassed,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-438,findings-42,Invalid check in WhiteList.checkWhitelist().,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-458,findings-42,CheckWhitelist fails to detect non-whitelisted users . ,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-475,findings-42,Everyone not configured could buy without whitelist,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-505,findings-42,Whitelist bypass,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-521,findings-42,Function checkWhitelist() does not check if an address is whitelisted or not,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-542,findings-42,Non-whitelist addresses could pass the whitelist check in `checkWhitelist`.,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-550,findings-42,Unwhitelisted users can receive tokens,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-56,findings-42,Non whitelisted user can bypass `checkWhitelist()`,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-568,findings-42,Tokens can be transferred to non-whitelisted `to` address when whitelisted contract is set in `VultisigWhitelisted` contract,Obvious leak,Blacklisted users can have vault tokens,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-61,findings-42,`Whitelist.sol#checkWhitelist` function may return true for not whitelisted account when `_allowedWhitelistIndex` is bigger than zero.,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-97,findings-42,Anyone Can Purchase Without Being Whitelisted Due to Incorrect Access Control,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-289,findings-42,Whitelist and MaxAddressCap protections for Vultisig token can be bypassed,address that is not whitelisted nor blacklisted will bypass whitelist check,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L229
Satisfactory,validation-42,findings-42,Missing null value check allows not whilisted users to buy VULT tokens from the pool,Obvious leak,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/ilo-contracts/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Satisfactory,validation-234,findings-42,Insufficient Whitelist Validation in `Vultisig` Token Transfer Process,Vultisig whitelisting can be bypassed by anyone,Obvious leak,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L197-L228
Satisfactory,findings-44,findings-44,ILO Pool launches will always fail when initialized with tick values not divisible by the tick-spacing for the Uniswap pool,Missing crucial validation,Insufficient tick validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L88-L89
Satisfactory,validation-615,findings-44,No security checks to ensure given lower & upper ticks to be valid ticks. Leading to silent reverts while depositing liquidity on successful presales.,Low QA on an admin call,Insufficient tick validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L88-L89
Satisfactory,findings-45,findings-45,The min amount of added liquidity is not always calculated correctly and will make successful ILO pools revert on their launches,Well described POC but refund isn't possible after a successful launch,DoS due to incorrect assumption of min amount to add liquidity,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,findings-20,findings-45,`DoS` on the launch due to a strict slippage check when adding liquidity to the Uniswap V3 pool.,Implemented in the base contract,DoS due to incorrect assumption of min amount to add liquidity,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,validation-187,findings-45,Strict Price Slippage Restriction in `launch()` Function Can Cause Transaction Reversion,Incorrect root cause,DoS due to incorrect assumption of min amount to add liquidity,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,validation-22,findings-45,0 slippage for pool launch could lead to DoS,Implemented in the base contract,DoS due to incorrect assumption of min amount to add liquidity,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,validation-338,findings-45,"The token amount required by Uniswap V3 pool may be 1 wei less than the totalRaised amount, results in project launch fail",Unlikely to happen,DoS due to incorrect assumption of min amount to add liquidity,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,validation-483,findings-45,ILOPool.Launch() could fail unreasonably due to rounding error and slippage check.,Implemented in the base contract,DoS due to incorrect assumption of min amount to add liquidity,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,validation-217,findings-45,Slippage is too rigid when creating liquidity,DoS due to incorrect assumption of min amount to add liquidity,Implemented in base contract,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L284-L293
Satisfactory,findings-53,findings-53,Use of `slot0` allows for `sqrtPriceX96` price manipulation.,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-123,findings-53,UniswapV3 `slot0` should not be used as it can be manipulated.,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-178,findings-53,slot0 manipulation,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-303,findings-53,Slot0 is vulnerable to manipulations,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-492,findings-53,Use of `slot0` to get `sqrtPriceLimitX96` can lead to price manipulation.,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-514,findings-53,Using `slot0` to get the `sqrtPriceX96` while launching project leads to manipulation of prices.,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-539,findings-53,using pool slot 0 price can cause issues,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-567,findings-53,Launcher could be frontrunned and the project might get launched at wrong price,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-578,findings-53,Use of slot0 to get sqrtPriceX96 can lead to price manipulation,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-684,findings-53,Vulnerability Due to Reliance on `slot0` Data for Price Fetching,Infeasible on POS,Use of slot0,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-192,findings-53,Using slot0 to get a price can lead to a price manipulation,Use of slot0,Infeasible on POS,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-242,findings-53,Use of Uniswap V3's `slot0`  for Price Retrieval Can Lead to Severe Price Manipulation ,Use of slot0,Infeasible on POS,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-243,findings-53,Project initialization is likely to fail due to `slot0` manipulation,Use of slot0,Intended design,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-328,findings-53,Dangerous use of `slot0` allows pool admin to use a `initialPoolPrice` that manipulates the pool price calculations,Use of slot0,Infeasible on POS,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-63,findings-53,Use of slot0 is easy to manipulate,Use of slot0,Infeasible on POS,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L115
Satisfactory,validation-142,validation-142,Investor will not be able to unlock/vest liquidity even though its completely vested,Intended design on break instaed of continue,One not started vesting can DoS completed vestings,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L410C13-L412C14
Satisfactory,validation-268,validation-142,Full liquidity will not vest even any one vest.start is greater than block.timestamp,Intended design on break instaed of continue,One not started vesting can DoS completed vestings,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L410C13-L412C14
Satisfactory,validation-566,validation-142,Incorrect Liquidity Calculation Due to Unordered Vesting Schedules in _unlockedLiquidity Function in ILOpool contract.,Intended design on break instaed of continue,One not started vesting can DoS completed vestings,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L410C13-L412C14
Satisfactory,validation-146,validation-146,[M-03] A project cannot launch pools if one pool does not meet the sale soft cap leading to DoS of a project,Likely DoS if one of the pool isn't launchable,several DoS vector for pool launch,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L187"""
Satisfactory,validation-209,validation-146,"If one pool gets refunded, all the cloned pools will not be able to launch",Likely DoS if one of the pool isn't launchable,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L187-L198
Satisfactory,validation-424,validation-146,Risk of DOS in `ILOManager::launch` if Some Project Pools Fail to Reach Soft Cap,Likely DoS if one of the pool isn't launchable,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L187-L198
Satisfactory,validation-613,validation-146,Permanent DoS of project launch if refund is triggered in any of the ILOPools,Likely DoS if one of the pool isn't launchable,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L187-L198
Satisfactory,validation-36,validation-146,Project will be unable to launch if any one of the ILOPool launch fails/reverts,Likely DoS if one of the pool isn't launchable,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193-L195
Satisfactory,validation-565,validation-146,Failure of One `ILOPool` to Reach Soft Cap Causes DoS for All Pools During Launch,Likely DoS if one of the pool isn't launchable,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193-L195
Satisfactory,validation-85,validation-146,"When one of the ILOPool launch functions revert, the ILOManager launch function should not revert",One not started vesting can DoS completed vestings,Likely DoS if one of the pool isn't launchable,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L410C13-L412C14,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L194"""
Satisfactory,validation-190,validation-190,Strict Equality In `launch` Function Leads To Reversion,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L187-L198
Satisfactory,validation-634,validation-190,"Using strict require statement for `initialPoolPriceX96` and `sqrtPriceX96` , can cause failure to launch.",High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L188-L198
Satisfactory,findings-41,validation-190,Adversary can prevent the launch of any ILO pool with enough raised capital at any moment by providing single-sided liquidity,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-100,validation-190,Adversaries can manipulate sqrtPriceX96 in an empty UniswapV3 pool and use single-sided liquidity to block the project launches,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-133,validation-190,DoS attack making projects unable to launch,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-174,validation-190,Front-running pool’s initialization can lead to failed launch,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-26,validation-190,sqrtPriceX96 can change over time affecting project initialization,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-34,validation-190,Project launch is vulnerable to DoS attack,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-35,validation-190,Launch of the ILOPool can be reverted due to strict require statement,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-375,validation-190,Launch can be prevented due to pool price manipulation.,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-432,validation-190,A `DoS` attack on the launch.,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-503,validation-190,The important `launch()` function can be DOS'd by manipulating the project's uniswap pool,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-515,validation-190,Launch depends on the uniswap pool state to work. This function will fail if there's already circulating supply and people can trade,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-571,validation-190,Malicious actor can add liquidity to the UniswapV3 pool and DoS the launch for a project.,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-614,validation-190,A malicious actor can DoS project launch by manipulating the project uniswap pool price `sqrtPriceX96`,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-62,validation-190,Newly created project with new uni-swap pool could fail on launch leading locking of user funds,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-629,validation-190,Launch can be prevented,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-630,validation-190,Prevent launching ILO pool by updating univ3 pool price,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-673,validation-190,# [H-2] Attacker Can Dos `launch` by adding liquidity to deployed pools,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-685,validation-190,A malicious user ca grief All Pool launches of any Project due to the strict check of `sqrtPriceX96` in `ILOManager::launch(),High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-98,validation-190,ILOPool can be blocked from ever launching if sqrtPriceX96 changes after launch,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-235,validation-190,DOS Attacker can frontrun `ILOManager.launch()` to make it revert with swap because of strict equality check of spot price.,High likelihood of DoS,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-609,validation-190,ILOPool Launch Price Check Might Lead to Spurious Reverts During Market Movements,Pool already exists with different price,High likelihood of DoS,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190"""
Satisfactory,validation-329,validation-190,"`ILOManager::launch` erroneously requires that current pool ratio is the exact same as when the project was initialized, which can permanently DoS project launches",Pool already exists with different price,High likelihood of DoS,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L187-L198
Satisfactory,validation-280,validation-190,Strict require statement while launching pool,High likelihood of DoS,Low quality report. Does not describes root cause.,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Satisfactory,validation-137,validation-247,Pool launch may fail due to out of gas error because of unbounded loop and excessive minting ,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-153,validation-247,Too many pools may cause the project to fail to launch,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-247,validation-247,Potential Denial of Service (DoS) Due to Unbounded Loop Iteration in `launch` and `claimRefund` Functions,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-285,validation-247,Possible DoS in `ILOManager.sol::launch()` and `ILOManager.sol::claimRefund` because of unbounded `initializedPools.length`,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-374,validation-247,Pool cannot launch with particular amount of investors.,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-384,validation-247,Possible dos when too many pools,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-441,validation-247,The `_initializedILOPools` array is unbounded this can lead to a DOS in the system.,Low QA frequently reported by the bots on unbounded array,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-448,validation-247,Possible DOS in `launch()` and `claimRefund()` functions because unbounded loop can run out of gas.,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-533,validation-247,Project and all of its pools can be DOS'ed from being launched due to gas running out,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-544,validation-247,ProjectAdmin can DOS `IloManager.launch()` by creating multiple ILO pools causing the for loop to run out of gas and revert,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-548,validation-247,"Pool added after project launch, cannot be launch due to DOS in the `ILOManager.sol:launch` function",Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-554,validation-247,Unbounded `ILOPools` can lead to DoS during Launch,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-570,validation-247,`_initializedILOPools[uniV3PoolAddress` array can grow too large and prevent core functions  from executiing ,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-603,validation-247,a big number of pools will make a protocol unlaunchable and will lock the `SaleTokens` forever,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-653,validation-247,Denial of service built in the ILOPool.launch function because of the likelyness of it reaching the gas limit.,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-254,validation-247,`launch()` & `claimRefund` may fail due to potential OOG error,several DoS vector for pool launch,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-337,validation-247,Launching projects may DoS due to insufficient gas,several DoS vector for pool launch,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Satisfactory,validation-120,validation-310,[M-04] - Hard-coded 5% slippage isn't optimal,Intended design,Slippage should not be hardcoded,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L45
Satisfactory,validation-173,validation-310,Possible significant discrepancies in the quoted price due to hard-corded slippage Percentage in UniswapV3Oracle Contract,Intended design,Slippage should not be hardcoded,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L45
Satisfactory,validation-310,validation-310,Users contributed amount are heavily deflated,it will be slightly different from the actual ETH amount buyers spent,Slippage should not be hardcoded,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L45
Satisfactory,validation-446,validation-310,High hard-coded slippage,Intended design,Slippage should not be hardcoded,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L45
Satisfactory,validation-208,validation-310,Hard-coded slippage doesn't provide enough slippage protection,Slippage should not be hardcoded,Intended design,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L45
Satisfactory,findings-31,validation-311,Potential Unfair Fee Calculation For Users,Intended design,Fees should be global and not for each contract. This is QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L149-L157
Satisfactory,validation-311,validation-311,A subtle invariant is broken in regards to the immutability of both the platform and performance fee across protocol's project pools,Intended design,Fees should be global and not for each contract. This is QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L149-L157
Satisfactory,validation-261,validation-320,No slippage protection for function `buy`.,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L126-L176"""
Satisfactory,validation-205,validation-320,Missing slippage protection for the `buy()` function,Missing slippage protection in claim. I think this is QA as it is a feature request,Missing slippage check,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L156"""
Satisfactory,validation-320,validation-320,WRONG CALCULATION IN LIQUIDITY  DELTA CREDITS AN INVESTOR WITH LESS LIQUIDITY SHARES THAN HE SHOULD RECEIVE.,Slippage in need to circumvent calculation discrepancy,Low quality report,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L155-L159
Satisfactory,validation-662,validation-320,Insufficient Slippage Control in buy Function,GPT,Missing slippage check,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L156
Satisfactory,validation-181,validation-355,Missing Slippage Protection in Claim Function,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184"""
Satisfactory,validation-355,validation-355,`ILOPool.sol#claim` function does not have slippage control.,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184"""
Satisfactory,validation-551,validation-355,`claim` Function Fails to Protect Stakeholders from Slippage,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184"""
Satisfactory,validation-262,validation-355,No slippage protection for the function `claim`,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Satisfactory,validation-541,validation-355,`claim` function lacks slippage controls for `amount0` and `amount1` returned by `pool.burn` function call,Missing slippage checks,Missing slippage protection in claim. I think this is QA as it is a feature request,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Satisfactory,findings-32,validation-355,Lack of slippage protection during claiming,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205
Satisfactory,findings-39,validation-355,Sandwich attacks in claim() due to missing slippage check,Missing slippage check,Missing slippage protection in claim. I think this is QA as it is a feature request,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205
Satisfactory,validation-339,validation-355,`ILOPool::claim` should have slippage protection,Missing slippage protection in claim. I think this is QA as it is a feature request,Missing slippage check,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205
Satisfactory,validation-660,validation-355,Insufficient Slippage Control in claim Function Causes Financial Risk for Users,Missing slippage protection in claim. I think this is QA as it is a feature request,Missing slippage check,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205
Satisfactory,validation-68,validation-355,Missing slippage/deadline checks in claim function in ILOPool,Missing slippage protection in claim. I think this is QA as it is a feature request,Slippage in need to circumvent deadline,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L205
Satisfactory,validation-547,validation-355,`claim` function does not have any deadline check,Slippage in need to circumvent deadline,Invalid,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Satisfactory,validation-423,validation-423,Risk of DOS in `ILOManager::claimRefund` if Some Project Pools Get Launched While Others Fail,Problematic if not all pools are refundable,several DoS vector for pool launch,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L201-L207"""
Satisfactory,validation-670,validation-423,Unhandled Exception Risk,GPT,Problematic if one of the pool isn't launchable or refundable,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L186-L207
Satisfactory,validation-157,validation-442,ILOPool whitelist can be bypassed by transferring nft token,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L133"""
Satisfactory,validation-420,validation-442,Malicious ILO Participants Can Use Whitelisted Address To Buy Multiple NFT Positions For Non-Whitelisted Addresses,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143"""
Satisfactory,validation-43,validation-442,Investor can mint multiple nfts and bypass maxCapPerUser because of wrong validation,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143"""
Satisfactory,validation-442,validation-442,Transfer of ILOPool NFT token to different account allows for users to bypass the pool's `maxCapPerUser` invariant,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143"""
Satisfactory,validation-558,validation-442,Transfer of ERC721 can be used to bypasx max cap per user,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143"""
Satisfactory,validation-611,validation-442,Attacker can transfer their ILOPoolNFT to bypass the maxCapPerUser limitation,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,"""https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143"""
Satisfactory,validation-114,validation-442,Maximum cap per user can be bypassed in a whitelist-only ILO,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L126-L152
Satisfactory,findings-11,validation-442,Whitelisted users MaxCapPerUser limit can be surpassed,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L126-L176
Satisfactory,validation-537,validation-442,Non-whitelisted actors can obtain `ILOPool` NFT positions when they should not be allowed to,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L126-L176
Satisfactory,validation-287,validation-442,User can bypass their max user cap during sale,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L133-L152
Satisfactory,validation-426,validation-442,Whitelisted Users Can Bypass `maxCapPerUser` in `ILOManager::buy` Function,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L141-L152
Satisfactory,validation-421,validation-442,User can bypass `maxCapPerUser` by transfering tokens to other accounts,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143-L151
Satisfactory,findings-15,validation-442,`_maxAddressCap` can be bypassed by transferring NFT out,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143-L152
Satisfactory,findings-55,validation-442,`ILOPool` inherited ERC721 token transfer functions are not disabled,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143-L152
Satisfactory,validation-378,validation-442,User can bypass `maxCapPerUser`.,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L143-L152
Satisfactory,findings-2,validation-442,Users can purchase more than the maxUserCap by transferring NFT,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L150-L151
Satisfactory,findings-48,validation-442,Max Cap per user can be bypassed by transferring ILOPool NFT,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-237,validation-442,maxCapPerUser should check the total raiseAmount of the positions owned by a user,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-244,validation-442,"The whitelisted addresses can `buy()` and call `transferFrom()` many times, it let non whitelisted addresses to own liquidity offering in ILOPool",Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-451,validation-442,Users Can Exceed Purchase Limit,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-579,validation-442,maxCapPerUser can be easily bypassed,Catchy leak,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-277,validation-442,Using balanceOf() for validation is wrong ,Intended design,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-605,validation-442,Transfering NFTs allows non-whitlisted addresses to claim liquidity and claim refund,Catchy leak,Report is not clear on impact. Several things are mentionated but loosely described in detail,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L133
Satisfactory,validation-305,validation-442,ILOPool.sol:buy() Method Can Be Used To Manipulate ILO Claiming Period by Minting Multiple NFTs,Catchy leak,Low quality report ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L141-L148
Satisfactory,validation-577,validation-442,User can bypass the max user cap,Catchy leak,Invalid,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Satisfactory,validation-411,validation-46,_allowedWhitelistIndex and Blacklisted Users,Missing blacklistedCount,Invalid,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L173-L175
Satisfactory,validation-46,validation-46,Manual `Whitelist::allowedWhitelistedIndex` adjustment is prone to error and should be automatized,Missing blacklistedCount,Invalid,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L173-L175
Satisfactory,validation-94,validation-46,Unimplemented blacklistedCount Functionality,Missing blacklistedCount,Invalid,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L173-L175
Unsatisfactory,validation-518,,"For initial VULT launch, whitelist logic can apply to non-buy actions, which breaks an invariant",We only add limitations for buy actions via uniswap v3 pool. Each receipient would still need to be whitlisted and cap restricted where flash activity is discouraged,,
Unsatisfactory,validation-522,,Blacklisted actor can obtain VULT tokens during the initial launch of VULT,Commonly known issue,Blacklisted users can have vault tokens,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/extensions/VultisigWhitelisted.sol#L30,https://github.com/code-423n4/2024-06-vultisig/blob/cb72b1e9053c02a58d874ff376359a83dc3f0742/hardhat-vultisig/contracts/Whitelist.sol#L204-L228"
Unsatisfactory,validation-617,,Non whitelisted accounts can still have `$VULT` tokens,Commonly known issue,Blacklisted users can have vault tokens,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/extensions/VultisigWhitelisted.sol#L30,https://github.com/code-423n4/2024-06-vultisig/blob/cb72b1e9053c02a58d874ff376359a83dc3f0742/hardhat-vultisig/contracts/Whitelist.sol#L204-L228"
Unsatisfactory,findings-14,,"Due to UniswapV3 Oracle version being higher than 0.8.0, some operations might overflow",conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,findings-16,,Lack of `unchecked` for `Uniswapv0.8` libarary,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,findings-5,,`TickMath` and `FullMath` libraries are missing `unchecked`,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-110,,Incorrect Solidity version in FullMath.sol can cause issues,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-111,,Incorrect Solidity version in OracleLibrary can cause issues,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-112,,Incorrect Solidity version in TickMath can cause issues,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-13,,[H-01] `FullMath` and `TickMath` libraries do not implement `unchecked` could result in incorrect liquidity,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-195,,"OracleLibrary, TickMath and FullMath files is optimized for ^0.8.0 solidity but it is not supposed to be",conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-196,,`TickMath.sol` and `FullMath.sol` don't use unchecked.,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-211,,[M-01] `TickMath` and `FullMath` libraries are missing `unchecked`,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-250,,The FullMath library is unable to handle intermediate overflows due to overflow that's desired but never reached,sqrtRatioAX96 > sqrtRatioBX96 is in place to prevent over/under flow,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-41,,`TickMath` and `FullMath` libraries might revert in solidity version 0.8,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-413,,TickMath can revert in solidity version 0.8,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-510,,Use unchecked in TickMath.sol and FullMath.sol,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-525,,The function body of getSqrtRatioAtTick() is missing an unchecked block to handle overflows if reached,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-530,,The FullMath library is unable to handle intermediate overflows due to overflow that's desired but never reached,sqrtRatioAX96 > sqrtRatioBX96 is in place to prevent over/under flow,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-569,,Missing Unchecked Arithmetic Leading to DoS in `UniswapV3Oracle`,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-616,,Use unchecked in SqrtPriceMathPartial.sol,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-656,,`TickMath` `OracleLibrary` and `FullMath` libraries are missing `unchecked`,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-8,,Forked Uniswap libraries not optimized for solc version which can DOS protocol operations.,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Adapt library for compiler. QA at best. ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-104,,TWAP Window should be configurable,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,"TWAP window should be flexible. Seems like QA, as twap window seems to be max 30 minutes and not 30 minutes as constant",https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L16
Unsatisfactory,validation-408,,TWAP period should not be constant ,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,"TWAP window should be flexible. Seems like QA, as twap window seems to be max 30 minutes and not 30 minutes as constant",https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L16
Unsatisfactory,validation-499,,Current PERIOD implementation could lead to swapping scenario where user could swap at an inflation rate.,Inadequate proof,"TWAP window should be flexible. Seems like QA, as twap window seems to be max 30 minutes and not 30 minutes as constant",https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L16
Unsatisfactory,validation-501,,TWAP Oracle inflexible PERIOD,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,"TWAP window should be flexible. Seems like QA, as twap window seems to be max 30 minutes and not 30 minutes as constant",https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L16
Unsatisfactory,validation-102,,Incorrect TWAP price returned by UniswapV3Oracle.sol,Known and intended,TWAP window maybe smaller than 30 minutes,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L41
Unsatisfactory,validation-304,,TWAP price is calculated for timeframe less than the min 30 mins ,Known and intended,TWAP window maybe smaller than 30 minutes,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L41
Unsatisfactory,validation-77,,Unstable TWAP will be returned when the pool is just launched,Known and intended,TWAP window maybe smaller than 30 minutes,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L41
Unsatisfactory,validation-12,,Burning functionality is missing in Vultisig contract,Intended design via parental burn(),Mismatch docs and code regarding burn mechanism. At best QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Vultisig.sol#L11
Unsatisfactory,validation-125,,Inconsistency in Token Burn Functionality of `Vultisig` Contract,Intended design via parental burn(),Mismatch docs and code regarding burn mechanism. At best QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Vultisig.sol#L11
Unsatisfactory,validation-147,,VULT lacks burn function,Intended design via parental burn(),Mismatch docs and code regarding burn mechanism. At best QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Vultisig.sol#L11
Unsatisfactory,validation-392,,Vultisig should be burnable,Intended design via parental burn(),Mismatch docs and code regarding burn mechanism. At best QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Vultisig.sol#L11
Unsatisfactory,validation-418,,M-1 There is no external function `burn()` in the VULT contract,Intended design,Mismatch docs and code regarding burn mechanism. At best QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Vultisig.sol#L11
Unsatisfactory,validation-462,,Internal _burn() function is not exposed externally in the Vultisig.sol contract,Intended design via parental burn(),Mismatch docs and code regarding burn mechanism. At best QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Vultisig.sol#L11
Unsatisfactory,validation-171,,Lack of Blacklist Check When Adding Whitelisted Addresses,Inconsequential,Address might be blacklisted and whitelisted at the same time. Seems QA owner mistake,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L185-L187
Unsatisfactory,validation-400,,Address can be blacklisted and whitelisted at the same time ,Inconsequential,Address might be blacklisted and whitelisted at the same time. Seems QA owner mistake,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L185-L187
Unsatisfactory,validation-534,,Inconsistencies in blacklist and whitelist mappings.,Inadequate elaboration. Inconsequential,Address might be blacklisted and whitelisted at the same time. Seems QA owner mistake,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L185-L187
Unsatisfactory,validation-523,,VultisigWhitelisted Contract Vulnerable to Whitelist Bypass,Low QA on uninitialized variable,Vultisig whitelisting can be bypassed by anyone,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204-L228
Unsatisfactory,validation-33,,Manipulatable contributed amount of `VULT`,We only add limitations for buy actions via uniswap v3 pool,Inflate contribution ,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L204C5-L206C14
Unsatisfactory,findings-50,,Treasury can't claim liquidity while the whitelist is active,claim isn't buy,Treasury should be allowed to claim liquidity at any moment. This seems QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L205
Unsatisfactory,validation-241,,Blacklisting can be easily bypassed because of insufficient check.,Commonly known issue,Funds can be transferred to black-listed address. This is QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L205
Unsatisfactory,validation-256,,Blacklisted Addresses Can Bypass Restrictions by Purchasing Tokens for Whitelisted Addresses,onlyVultisig,Funds can be transferred to black-listed address. This is QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L205
Unsatisfactory,validation-588,,Max contribution cap check might freeze user's liquidity in Uniswap pool,We only add limitations for buy actions via uniswap v3 pool,VAULT token price high can prevent claiming,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L222
Unsatisfactory,validation-624,,Investors might not be able to claim their `$VULT` sale tokens if priced high,We only add limitations for buy actions via uniswap v3 pool,VAULT token price high can prevent claiming,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L222
Unsatisfactory,validation-675,,"Vultisig token transfers can be Dossed, preventing users from receiving them.",Commonly known issue,VAULT token price high can prevent claiming,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L222
Unsatisfactory,findings-13,,"_IsSelfWhitelistDisabled defaults to false, and users may get the whitelist first",Intended design,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,findings-47,,Users can silently whitelist themselves without admins noticing it,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,validation-113,,Whitelisting available on deploy for anyone.,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,validation-316,,Whitelist Griefing With Dust in `Whitelist.sol` when `_isSelfWhitelistDisabled` is False.,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,validation-444,,Unsetting `self-whitelist` on construction allows Attackers to whitelist themselves even if the Project plan was to disable self-whitelist,Intended design,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,validation-485,,Missing _selfWhitelistDisabled = true in constructor allows anyone to receive a guaranteed spot in whitelist,Intended design,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,validation-552,,Users can whitelist post-deployment by sending ETH,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Variable not initialized allows whitelist front-running,"https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L29,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L48-L51"
Unsatisfactory,findings-18,,Non-malicious users can be griefed from getting whitelisted,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-148,,The attacker can seize all whitelists,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-406,,_isSelfWhitelistDisabled Vulnerable to Sybil Attacks,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-498,,Attacker can make 0 msg.value receive() function calls to spam the whitelist,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-55,,Whitelist can be indefinitely bricked by adding large amount of addresses using `receive()` to self whitelist,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-619,,Self-whitelist with ETH transfer via `Whitelist::receive` can be easily abused to cause Denial-of-service (DOS) on token transfers during whitelist period,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-669,,Selfwhitelisting option combined with allowedWhitelistedIndex would result in restricting legit addresses,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-681,,Attackers can make users not allowed for whitelist when Self Whitelist gets enabled,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Self-whitelisting sybil attack,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L72
Unsatisfactory,validation-188,,Multisig Wallets Cannot Get White-listed Due to the `transfer()` Function Gas Constraint,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-201,,Use call() instead of transfer() when transferring ETH in Whitelist.sol,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-203,,"`Whitelist:: receive` uses `transfer` to handle eth transfer, which will fail for smart accounts, multisig wallets",Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-443,,using `transfer()` instead of `call()` prevents Smart Contract Wallets from Self-whitelisting,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-449,,Use `address.call{value:x}()` instead of `payable.transfer()`.,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-452,,Using transfer instead of low level call,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-484,,Self-whitelist doesn't work if msg.sender is a contract,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-52,,Possible denial of service when Self-whitelisting with smart contract account ,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-642,,transfer(...) function in Whitelist(...) can be replaced by a direct call,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-66,,Use of solidity's .transfer makes self-whitelisting inaccessible to smart wallets like Safe,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-668,,Avoid using of transfer(),Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-71,,Risky use of `transfer` during self whitelist,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-73,,`call()` should be used instead of `transfer()` when transferring ETH,Low QA frequently reported by the bots,No support for contracts to be self-whitelisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-273,,The schedules can be overlapped due to improper check.,Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,Owner mistake in setting start and end. QA at best.,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/base/ILOVest.sol#L41-L48
Unsatisfactory,validation-546,,`ILOVest`'s vest schedule is incorrectly validated which breaks key invariant of Vesting,Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,Owner mistake in setting start and end. QA at best.,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/base/ILOVest.sol#L41-L48
Unsatisfactory,validation-649,,Lack of proper validation makes it possible to start a pool with a start and end date that is in the past ,Unlikely to happen,Owner mistake in setting start and end. QA at best.,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/base/ILOVest.sol#L41-L48
Unsatisfactory,validation-366,,"Missing vesting end date check on `ILOVest::_validateVestSchedule` leads to pool creations with unfair vesting schedule for investors, allowing a project team member to claim the his part of the raised tokens instantly after the vesting period starts",Working as intended as circumvented by lastEnd,Incomplete schedule validation allowing owner to have an unfair vesting,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/base/ILOVest.sol#L43
Unsatisfactory,validation-314,,Missing Percentage Checks on `ILOManager::setPlatformFee` & `ILOManager::setPerformanceFee`,Low QA on boundary checks,Owner mistake while setting fees. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L149-L157
Unsatisfactory,findings-24,,DoS: The `initProject` function can be subject to a denial-of-service (DoS) attack if a malicious attacker creates a `WETH/VULT` pool on Uniswap V3 and initializes the initial price incorrectly earlier.,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,findings-46,,ILO pool launches can be prevented by initializing the pool or the project beforehand,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,findings-7,,Projects that want to create an ILO sale via the ILOManager contract will be dosed,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,validation-150,,initProject may be blocked by attacker,Intended design,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,validation-371,,Potential DoS Vulnerability in Uniswap v3 Pool Initialization,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,validation-453,,initProject() can be DOSed if the project is for existing UniV3 pool,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,validation-487,,A project can't be initialized if `saleToken/raiseToken` pool is created earlier,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,validation-597,,Invalid validation prevents admin of project from initializing price,"Analyzer: L-5, L-16",Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,validation-672,,DOS in project initialization due to price slippage,Intended design,Pool already exists with different price,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L190
Unsatisfactory,findings-49,,New ILO Pools can be initialized for a project that has ongoing sales affecting its previous buyers,Admin is trusted,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Unsatisfactory,validation-5,,Any investor can prevent pool from being launched by refunding his tokens,It's being governed by _project.refundDeadline,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Unsatisfactory,validation-679,,Attacker can DOS attack by claiming refund for ILOPools,It's being governed by _project.refundDeadline,several DoS vector for pool launch,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L193C9-L195C10
Unsatisfactory,findings-23,,The `ILOManager.initProject` function can be frontrun,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,findings-29,,Potential Front-Run with a Different `initialPoolPriceX96` to cause DoS,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,findings-3,,Attacker can DoS ILO Creation,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,findings-56,,Frontrunable ILOManager.initProject and no means to delete _cachedProject mappings allows for DOS,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,findings-8,,Project admins can be frontruned by a malicious user when creating a new ILOPool,onlyProjectAdmin,front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-106,,Adversaries can front-run initProject function to prevent actual project's owner from launching ILO with the protocol,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-107,,User can be grief attacked when creating a project,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-119,,An attacker can frontrun `initProject()` by calling `initProject()` to DOS `initILOPool()` ,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-128,,Front running attack to initialize function in ILOManager,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-152,,An attacker can call initILOPool first to become admin,onlyProjectAdmin,front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-166,,Race Condition in `initialize` Function Leading to Unauthorized Manager Assignment,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-231,,Attacker can squat pool addresses to prevent official deployments and trap users funds,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-281,,initProject() can be frontrun ,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-29,,Malicious user can frontrun initProject() to DoS the honest project,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-302,,Attacker can prevent new Project creation by front-running and cause DoS.,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-31,,Attacker can frontrun initProject() by creating a uniswap pool to completely DoS the project,Intended design,front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-312,,ILOManager.sol can be initialized by anybody,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-333,,Attacker can front-run `initProject()` to cause launch to fail,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-367,,Attacker Can Front-Run User's Projects,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-390,,An attacker can frontrun `initProject()` by directly deploying/manipulating the uniswapV3 pool to DOS `initProject()`,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-410,,Malicios user can frontrun call to initProject and cause honest transactions to create a project revert. A party with enough funds can DoS an ILO launch.,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-415,,ILOManager Initializer,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-434,,The `initProject` function should have a modifier that checks if `msg.sender` has proper access,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-468,,Front-running in project initialization will lock ILO pool process creation for uniswapV3 address,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-470,,Denial of Service (DoS) Attack on Project Initialization via Front-Running,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-489,,Anyone can call `initProject()` function to update the project fees and make other critical changes,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-493,,"frontrunning every call to ""initProject"" will avoid any creator from using it","Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-50,,Anyone can become manager of a pool,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-555,,Attacker can frontrun creator of project to deny admin ownership,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-574,,"`ILOManager::initialize` misses `onlyOwner` modifier, and a malicious user can frontrun `initialize` function.","Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-600,,Front-run to block valid projects initialization,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-632,,Attacker can frontrun a project deployment and take ownership,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-633,,"`initProject` is prone to Denial-Of-Service attacks, preventing users from creating new projects","Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-636,,Project initialization can be DOS'ed,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-640,,"Using `MANAGER = msg.sender` in `initialize()` function of `ILOPool.sol` , can give Managerial access to anyone who calls the contract leading to weak access control vulnerability.","Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-644,,Front-Running Vulnerability in initProject in ILOmanager Causing Project unable to use ILO Pool,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-651,,"`ILOManager::initProject` can be frontrunned by a malicious user, which might make the entire protocol unusable, and can cause loss of funds.","Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-666,,Anyone can call function initialize(),"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-72,,`ILOManager.sol#initProject` function can be frontrun.,"Analyzer: L-5, L-16",front-running initialization. seems qa,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-28,,Malicious project can set `launchTime` much earlier to bypass `DEFAULT_DEADLINE_OFFSET`,Project admin should be trusted on boundary limits,Lack of check that launchTime is greater than block.timestamp,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L58
Unsatisfactory,validation-282,,Project's launch time can be set in past ,Project admin should be trusted on boundary limits,Lack of check that launchTime is greater than block.timestamp,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L58
Unsatisfactory,validation-361,,"In the initProject function, the launchTime check is missing.",Project admin should be trusted on boundary limits,Lack of check that launchTime is greater than block.timestamp,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L58
Unsatisfactory,validation-480,,Anyone cannot `claimRefund` due to incorrect assumption of `refundDeadline`.,Refund still possible if launch fails,Refund is not possible either before or after launch,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L58,https://github.com/code-423n4/2024-06-vultisig/blob/cb72b1e9053c02a58d874ff376359a83dc3f0742/src/ILOPool.sol#L342"
Unsatisfactory,validation-16,,DOS attack prevent initiating new ILOPools,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-199,,Malicious actor can frontrun pool creation by deploying clone at deterministic address,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-260,,Salt used for creating clones is broken,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-300,,Possible front-running griefing attack on `ILOManager::initILOPool`,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-365,,Initing ILO pools is vulnerable to reorg attacks/front run,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-409,,`initILOPool()` may cause front-running griefing attack on NFT creations.,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-45,,Possible griefing attack on the `initILOPool(...)` function due to how `Clones.cloneDeterministic(...)` function is used.,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-531,,Salt creation does not include msg.sender,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,validation-590,,Vulnerability in Deterministic Cloning with Predictable Salt,Infeasible,Front-run deterministic deployement,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L78-L84
Unsatisfactory,findings-22,,The `sqrtRatioUpperX96` should be greater than the `initialPoolPriceX96` when initializing the `ILOPool` in the `ILOManager.initILOPool`,Low QA on boundary checks (admin call),Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,findings-33,,The price range configuration is flawed in `ILOManager.initILOPool`.,Low QA on boundary checks (admin call),Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-130,,Missing check for correct pool intialization allows project admin to intialize pool with incorrect price range,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-144,,"[M-01] Out-of-range ILOPool can be created, leading to an inactive liquidity position",Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-149,,Incorrect price limits during the initILOPool process may lead to incorrect pricing.,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-207,,Insufficient check for `initialPoolPriceX96 ` ,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-323,,Incorrect range validation in `initILOPool()`,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-379,,Initial price can be set outside of the price range.,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-48,,Wrong initialPoolPriceX96 upper tick comparison,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-481,,Invalid pool can be initialized,Intended design,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-623,,initILOPool function allows _project.initialPoolPriceX96 to be more than sqrtRatioUpperX96,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-638,,"The function ILOManager.initILOPool() does not successfully check that the given ticks from a user include the current price of the pool, leading to a wrongful allocation of funds.",Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-648,,Invalid validation for pool price range,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-686,,Miscalculate amount of liquidity and amount of token ,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-99,,`ILOManager.sol#initILOPool` function has error on validating initial pool price.,Low QA on boundary checks,Incorrect price validation,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-625,,Unsafe use of `_mint` instead of `_safeMint`,Analyzer: M-2,Use safeMint instead of mint. This is QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L144
Unsatisfactory,validation-635,,Hardcoded 0 value in tokenOfOwnerByIndex disallows investor from using another tokenId during buy(),Transfer the other to another controlled address then,User can only add liquidity to one position,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L147
Unsatisfactory,validation-159,,Whitelist doesn't matter,Commonly known issue,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Unsatisfactory,validation-622,,`Whitelist._maxAddressCap` can be bypassed when claiming `$VULT` tokens,We only add limitations for buy actions via uniswap v3 pool,Users can bypass max limit by transferring the sale NFT. This seems like QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L151
Unsatisfactory,findings-19,,The late claimers are unable to claim their positions because of an incorrect calculation of fees in the function `ILOPool.claim`,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,findings-40,,Incorrect platformFee calculation for claim function,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,findings-43,,Most users won't be able to claim their share of Uniswap fees,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,findings-52,,UniswapV3 protocol fees are unfairly allocated,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-132,,Inaccurate Fee Calculation May Result in Overcharging or Undercharging,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-140,,Position owner may not receive accumulated LP fees when they claim liquidity,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-350,,Incorrect fee distribution in `claim()`,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-430,,Improper fee distribution mechanism in the `ILOPool.claim()` function.,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-433,,The fees for the `FEE_TAKER` are not calculated correctly in the [ILOPool.claim](https://github.com/code-423n4/2024-06-vultisig/blob/0957ff9e50441cd6de6b4f6e28c7ea93f5cffa85/src/ILOPool.sol#L184-L261) function,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-459,,"ILOPool::claim : The amount transfered to the feeTaker is incorrect, which causes the claim function to revert ",Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-460,,ILOPool.claim Sends Excess Fees to FEE_TAKER,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-490,,Investors in an ILOPool can lose out on their share of LP position Fees earned from Uniswap V3,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-513,,`claim` function incorrectly assumes that `amount0` and `amount1` returned by `UniswapV3Pool.burn` function exclude swap fees that LP is entitled to,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-586,,Any subsequent `claim()` after first `claim()` will receive incorrect amount of tokens even could lead to revert operation,Incorrect assumptions,Incorrect computation of fees ,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-414,,User / fee taker blacklisted by token will temporarily prevent fees from being collected for the protocol,Low QA on having an admin address blacklisted,Blacklist fee taker. At best QA I think,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L259C8-L260C96
Unsatisfactory,validation-601,,Liquidity claims can get DOS'ed if feeTaker address gets blacklisted,Low QA on having an admin address blacklisted,Blacklist fee taker. At best QA I think,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L259C8-L260C96
Unsatisfactory,findings-30,,The sale token is not deposited to ILOPool.,Inconsequential as this can always be transferred manually into the contract,Owner may not send the tokens to pool contract. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L296-L303
Unsatisfactory,validation-118,,ILOPool can never be launched if project admin doesnt transfer tokens to the pool,Incorrect perceptions,Owner may not send the tokens to pool contract. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L296-L303
Unsatisfactory,validation-121,,SALE_TOKEN is not transfered to ILOPool while creating new pool,Incorrect perceptions. Will be done at launch,Owner may not send the tokens to pool contract. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L296-L303
Unsatisfactory,validation-271,,Pool launch will revert while adding liquidity to uniswap due to lack of sale token,Incorrect perceptions. Project admin will pre-transfer sale tokens to the contract,Owner may not send the tokens to pool contract. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L296-L303
Unsatisfactory,validation-500,,Investors will face opportunity loss if project does not send Sale Tokens,Unlikely to happen as project admin is trusted,Owner may not send the tokens to pool contract. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L296-L303
Unsatisfactory,validation-360,,Incorrect vestingConfig initialisation when lauching pool,Intended because vestingConfigs[i].recipient == address(0) when i=0 in _validateSharesAndVests(),index 0 vesting is skipped,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L311
Unsatisfactory,validation-270,,"When the admin is blacklisted from the token, the `launch` will fail.",SALE TOKEN is VULT,Owner blacklisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L332
Unsatisfactory,validation-516,,"If the admin gets blacklisted by the SALE_TOKEN token (like if USDC/USDT tokens are used), the whole launch process for all ILOPools of a particular pool key will be DoS'ed",SALE TOKEN is VULT,Owner blacklisted. QA at best,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L332
Unsatisfactory,validation-436,, ILOManager::launch() function breaks the invariant,Intended design,Docs different than code in access control. I think QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L363-L373
Unsatisfactory,validation-526,,"`ILOManager.launch` function is callable by anyone, which breaks invariant that only project admin should be allowed to launch project and all of its ilo pools",Intended design,Docs different than code in access control. I think QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L363-L373
Unsatisfactory,validation-74,,Misconfigured Access Control in `launch` Function,Intended design,Docs different than code in access control. I think QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L363-L373
Unsatisfactory,validation-75,,Incorrect Access Control Modifier in `claimProjectRefund` Function,Protocol design,Docs different than code in access control. I think QA,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L363-L373
Unsatisfactory,validation-127,, Critical Initialization Flaw in ILOPool.sol Prevents Contract Functionality,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-167,,Funds can be locked forever if recipient is a contract,Low QA frequently reported by the bots,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-176,,`ILOPool` initilizable because constructor disable initilize,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-198,,`ILOPool.sol` cannot be initialized,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-219,,Users can lost their ETH during self-whitelist,Low QA frequently reported by the bots,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-224,,Receive function unchecked-transfer and may lock user funds,Low QA frequently reported by the bots,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-248,,Missing deadline for slippage in `addLiquidity`,Insufficient proof,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-272,,Ether can be locked into a contract ,Low QA frequently reported by the bots,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-315,,IILOPool can never be initialized,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-363,, Disabling the initializer could cause issues with initing,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-464,,No deadline set when depositing into Uniswap pool,Insufficient proof,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-471,,Missing Deadline Check in `AddLiquidityParams` Leading to Potentially Unexpected Outcomes When Adding Liquidity,Insufficient proof,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-494,,`function initialize` in the ILOpool contract will be uncallable ever Rendering Contract Non-Functional,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-618,,Initializing an ILO pool will always revert,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-637,,ILOPool::initialize() will almost always revert,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-81,,The `ILOPool` contract will not get initialized ,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-126,,ILOPool Admin can initialize an unlaunchable pool,Low QA on admin controlled boundary checks,softCap > hardCap. Owner mistake,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L81C8-L89C1
Unsatisfactory,validation-3,,Missing `unchecked` blocks  in `TickMath.sol` and `FullMath.sol`,Adapt library for compiler. QA at best. ,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-336,,Transferring `Vultisig` tokens may experience DoS from overflow due to incorrect version of `FullMath.sol`,Adapt library for compiler. QA at best. ,sqrtRatioAX96 > sqrtRatioBX96 is in place to prevent over/under flow,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-422,,TickMath might revert in solidity version 0.8,Adapt library for compiler. QA at best. ,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-58,,Unchecked Arithmetic Operations in FullMath and TickMath Libraries Leading to Potential Overflows and Unexpected Behavior,Adapt library for compiler. QA at best. ,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-67,,TickMath & FullMath & OracleLibrary might revert in solidity version 0.8,Adapt library for compiler. QA at best. ,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/uniswapv0.8/TickMath.sol#L2
Unsatisfactory,validation-641,,The `UniswapV3Oracle::PERIOD` variable is a constant value,TWAP window should be flexible. Seems like QA,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L16
Unsatisfactory,validation-15,,TWAP `duration` for Uniswap Oracle should be at least `30 mins`,TWAP window maybe smaller than 30 minutes,Known and intended,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/oracles/uniswap/UniswapV3Oracle.sol#L41
Unsatisfactory,validation-264,,Use call() rather than transfer() on address payable,No support for contracts to be self-whitelisted. QA at best,Low QA frequently reported by the bots,https://github.com/code-423n4/2024-06-vultisig/blob/main/hardhat-vultisig/contracts/Whitelist.sol#L73
Unsatisfactory,validation-240,,Immediate Sale Closure due to inadequate `saleEndTime` validation during pool initialization,Owner mistake in setting start and end. QA at best.,Unlikely to happen,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/base/ILOVest.sol#L41-L48
Unsatisfactory,validation-202,,Anybody can front-run `initProject()`,front-running initialization. seems qa,"Analyzer: L-5, L-16",https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-683,,Improper Access Control,front-running initialization. seems qa,"Analyzer: L-5, L-16",https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L57-L65
Unsatisfactory,validation-88,,Missing validation check to ensure that launchTime is greater than block.timestamp in the initProject function ,Lack of check that launchTime is greater than block.timestamp,LowQA on admin input parameter error,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L58
Unsatisfactory,validation-279,,Project Admin can Unfairly set initial Pool Price Above Upper Limit,Incorrect price validation,Low QA on boundary checks,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-327,,"`ILOManager::initILOPool` does not correctly verify if pool ticks are in-range, allowing project admin to manipulate the pool prices",Incorrect price validation,Low QA on boundary checks,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-598,,ILOManager Price Range Check Must Ensure Initial Price Falls Within Bounds,Incorrect price validation,Low QA on boundary checks,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-89,,Missing validation check to ensure that sqrtRatioUpperX96 is greater than initialPoolPriceX96 in the initILOPool function ,Incorrect price validation,Low QA on boundary checks,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOManager.sol#L90
Unsatisfactory,validation-388,,Assets will be lost when `buy` is called after project launch,Lost of funds if buy is called at wrong time,User mistake. Admin should have it configured properly to prevent it from happening,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L126
Unsatisfactory,validation-69,,"After launchSucceed, calling the buy function in ILOPool can lead to funds being locked in the contract",Lost of funds if buy is called at wrong time,User mistake. Admin should have it configured properly to prevent it from happening,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L126
Unsatisfactory,validation-674,,Use safeMint instead of mint for ERC721,Use safeMint instead of mint. This is QA at best,Analyzer: M-2,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L144
Unsatisfactory,validation-608,,ILOPool Buy Function Misses Updates for Additional NFTs Held by Investors,User can only add liquidity to one position,Transfer the other to another controlled address then,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L147
Unsatisfactory,validation-232,,Token Claim Issue in Pool Contract: Improper Distribution Leaves Pool Empty,Incorrect computation of fees ,Incorrect assumptions,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-276,,`feeTaker` can receive more than actual fees when `claim(...)` is called,Incorrect computation of fees ,Incorrect assumptions,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-332,,"`ILOPool::claim` incorrectly re-adds fees to the caller's rewards, which can cause users to receive rewards owed to others, or DoS due to underflow",Incorrect computation of fees ,Incorrect assumptions,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-342,,`ILOPool::claim` calculates fees based off current `positionLiquidity` rather than `liquidity2claim`,Incorrect computation of fees ,Incorrect assumptions,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L184-L261
Unsatisfactory,validation-115,,Users/Fee taker may not be able to claim/take their amount if they are blacklisted,Blacklist fee taker. At best QA I think,Low QA on having an admin address blacklisted,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L259C8-L260C96
Unsatisfactory,validation-83,,`refundAmount` will be stuck if `tokenOwner` were blacklisted by `RIASE_TOKEN`,Blacklist fee taker. At best QA I think,Low QA frequently reported by the bots,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L259C8-L260C96
Unsatisfactory,validation-233,,`initialize` Function will always revert when the Vesting Config index is greater than 0 : Incorrect Validation of Vesting Schedules,index 0 vesting is skipped,BPS respectively compared and cateretd to vestingConfigs[i].shares and schedule[i].shares,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L311
Unsatisfactory,validation-502,,Inconsistent `totalRaised` State Variable in `claimRefund` ,totalRaised is not updated during refund,Incorrect perceptions,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L350-L360
Unsatisfactory,validation-356,,Initialize Function cannot be called in Pool Contract,Contract cannot be initialized. This seems invalid since this is a normal pattern in upgradeable contracts,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.","https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L49-L51,https://github.com/code-423n4/2024-06-vultisig/blob/7fb0da757c98116090f35810146ea742ca3b94da/src/ILOPool.sol#L61-L62"
Unsatisfactory,validation-87,,Missing validation check to ensure that softCap is less than hardCap in the initILOPool function,softCap > hardCap. Owner mistake,LowQA on admin input parameter error,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L81C8-L89C1
Unsatisfactory,validation-572,,Tokens to deposit on launch is wrongly calculated for projects with already circulating supply (pools available for trading),High likelihood of DoS,Invalid,https://github.com/code-423n4/2024-06-vultisig/blob/main/src/ILOPool.sol#L269
Unsatisfactory,findings-10,,Users will not be able to get tokens more than 3e18 ,Intended design,Invalid,
Unsatisfactory,findings-17,,`ILOManager.initProject` can be front-run.,"Analyzer: L-5, L-16",Low quality report,
Unsatisfactory,findings-26,,Malicious Users Can Prevent Large Purchases by Griefing attack,Incorrect perceptions,Invalid,
Unsatisfactory,findings-28,,"When `_vultisig` or `_pool` is reset, the `_contributed` is no way to clear",Owner is trusted,Overinflated owner mistake,
Unsatisfactory,findings-34,,The user are buying at a much higher price,Intended design,Invalid,
Unsatisfactory,findings-35,,The flashloan function of the VULT/ETH pool may affect buying,We only add limitations for buy actions via uniswap v3 pool. Each receipient would still need to be whitlisted and cap restricted where flash activity is discouraged,Lack of evidence,
Unsatisfactory,findings-37,,"The malicious project admin can make the project never launch, and then call claimProjectRefund to obtain the funds of all investors",Incorrect perception,Invalid,
Unsatisfactory,findings-38,,ClaimRefund function can never succeed,Incorrect perceptions,Invalid,
Unsatisfactory,findings-4,,Natspec indicates `ILOPool#positions(uint256 tokenId)` will revert on invalid tokenId but it will not,NC,Clearly overinflated,
Unsatisfactory,findings-6,,`UniswapV3Oracle.peek` assumes token decimal is always 18.,This isn't Chainlink associated,Invalid,
Unsatisfactory,findings-9,,Users can be unintentionally blocked by transfering tokens ,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-109,,VUltisig Whitelist Bypass Due to Incorrect Check for Uniswap V3 Pool Interactions and Potential Owner Manipulation,We only add limitations for buy actions via uniswap v3 pool,GPT,
Unsatisfactory,validation-117,,Re-enabling Whitelist Functionality Vulnerability in VultisigWhitelisted Contract,Breaking intended design,GPT,
Unsatisfactory,validation-134,,Reentrancy Attack in `approveAndCall` Function,This will be only used for trusted receiver contracts btw,GPT,
Unsatisfactory,validation-136,,Incorrect ETH Estimation in Vultisig's Whitelist Contract Leading to Whitelist Bypass,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,GPT,
Unsatisfactory,validation-138,,Launching will not work if the recipient of the VestingConfig is a smart contract that is incompatible with NFTs,Analyzer: M-2,Invalid,
Unsatisfactory,validation-145,,[M-02] Linear vesting incorrect validation can lead to underflow when the pool launched,Working as intended as circumvented by lastEnd,Low quality report,
Unsatisfactory,validation-155,,There may be funds stuck in the pool,Small wei of token amount can be left in contract due to rounding,Clearly overinflated. Lack Of Evidence,
Unsatisfactory,validation-156,,Implementations of clones could be metamorphic and lead to exploit,Infeasible,Invalid,
Unsatisfactory,validation-158,,Overflow may result in users unlocking fewer funds,Unlikely to happen,Clearly overinflated. ,
Unsatisfactory,validation-163,,Missing `_contributed` Mapping Update,Incorrect perceptions,Invalid,
Unsatisfactory,validation-164,,Lack of zero value check,Low QA,Invalid,
Unsatisfactory,validation-165,,Missing `_maxAddressCap` Check,Unneeded,Invalid,
Unsatisfactory,validation-168,,Lack of Contract Lock Check in receive Function,Low QA and inconsequential,Invalid,
Unsatisfactory,validation-169,,Lack of `_allowedWhitelistIndex` Validation When Adding Whitelisted Addresses,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-170,,Invalid Validation in `setAllowedWhitelistIndex` function,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-172,,`_maxAddressCap` overflow,Circumvented by _contributed[to],Invalid,
Unsatisfactory,validation-177,,Missing Gap for Upgradable Contracts,No upgradeability is entailed,Invalid,
Unsatisfactory,validation-18,,[M-03] - Missing approve to zero allowance first in `Vultisig::approveAndCall`,This is VULT,Invalid,
Unsatisfactory,validation-180,,Potential Off-by-One Error in Time Comparison Using >= with block.timestamp,Inconsequantial,Invalid,
Unsatisfactory,validation-182,,`_beforeTokenTransfer` will not work as intended because of missing override,Working as intended,Invalid,
Unsatisfactory,validation-183,,Token Transfer fail due to blacklist,Low QA frequently reported by the bots,Invalid,
Unsatisfactory,validation-184,,Refund not possible due to blacklisting,Low QA frequently reported by the bots,Invalid,
Unsatisfactory,validation-185,,Potential DoS via Out of Gas in Nested For Loops,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,Invalid,
Unsatisfactory,validation-186,,MissMatched data types,Insufficient proof,Invalid,
Unsatisfactory,validation-189,,ILOPool.buy does not incentivize investors at all by limiting the liquidity given to the investors,Intended design,Invalid,
Unsatisfactory,validation-19,,Arbitrary logic can be executed in `approveAndCall()` function due to lack of `spender` address validation,This will be only used for trusted receiver contracts btw,Invalid. ,
Unsatisfactory,validation-193,,MALICIOUS INVESTOR CAN PERMANENTLY DOS THE BUY FUNCTION,Inconsequential as it's no longer lauchable,Invalid,
Unsatisfactory,validation-194,,`PeripheryPayments::pay()` could fail due to `transfer()` method,This isn't native ETH transfer,Invalid,
Unsatisfactory,validation-197,,Using `delegatecall` in loop,Insufficent proof,Invalid,
Unsatisfactory,validation-200,,Persistent `msg.value` in Delegate Call Loop,Insufficent proof,Invalid,
Unsatisfactory,validation-21,,The performanceFee is not sent anywhere and just remains inside the contract.,Working as intended,Invalid,
Unsatisfactory,validation-213,,`setOpenToAll` has no access control,It's an abstract contract where the modifier is implemented in its child contract ILOPool.sol,Invalid,
Unsatisfactory,validation-214,,Funds can be stuck in the contract if the project didn't launch and tries to call the claimRefund through the onlyProjectAdmin due to  DOS,Low QA on unbounded loop. Recipient NFT minting isn't happening at launch and refund claim entails simple logic,Low quality report ,
Unsatisfactory,validation-220,,PeripheryPayments unchecked-transfer,Unlikely to happen,Invalid,
Unsatisfactory,validation-221,,Payable functions using delegatecall inside a loop,Insufficent proof,Invalid,
Unsatisfactory,validation-222,,Arbitrary `from` passed to `transferFrom` (or `safeTransferFrom`),Unneeded as pre-approval has been done,Invalid,
Unsatisfactory,validation-223,,ReceiveApproval unchecked-transfer,This will be only used for trusted receiver contracts btw,Invalid,
Unsatisfactory,validation-226,,ILOManager initProject refundDeadline overflow,conditional is in place to prevent impractical over/under flow. unchecked applies only to Solidity 8,Invalid,
Unsatisfactory,validation-227,,ILOPool buy - possible liquidity overflow,conditional is in place to prevent over/under flow. unchecked applies only to Solidity 8,Invalid,
Unsatisfactory,validation-228,,Uniswap price oracle manipulation,Known and intended,GPT,
Unsatisfactory,validation-23,,Using tx.origin can lead to an unintended party gaining control of the contract,Analyzer: L-1,Invalid,
Unsatisfactory,validation-236,,Risk of Stale or Invalid Oracle Data in `checkWhitelist` Function,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,GPT,
Unsatisfactory,validation-239,,Whitelisted Addresses Can Become Non-Whitelisted by Lowering `_allowedWhitelistIndex`,Low QA as it's meant to be incraesing only to cater for blacklistCount,GPT,
Unsatisfactory,validation-245,,When whitelister calling claimRefund function its not update the totalRaised ,Incorrect perceptions,Invalid,
Unsatisfactory,validation-249,,Update mint function to include callback data,Insufficient proof,Invalid,
Unsatisfactory,validation-257,,Invalid vesting periods may cause unexpected behavior in the vesting logic ,Working as intended as circumvented by lastEnd,Invalid,
Unsatisfactory,validation-258,, Incomplete Specification of Token Amounts in Uniswap V3 Liquidity Provisioning Leads to Potential Price Manipulation,params.pool.mint() will sort it out,Invalid,
Unsatisfactory,validation-265,,Some liquidity is locked due to division.,Small wei of token amount can be left in contract due to rounding,Invalid,
Unsatisfactory,validation-267,,"Rounding issue, can cause users to avoid paying protocol and performance fees",Similar to L-11 from Analyzer,Unrealistic scenario,
Unsatisfactory,validation-269,,EIP-1167 is not supported on zkSync Era,OOS,Invalid,
Unsatisfactory,validation-274,,Liquidity bought after pool launch will lock the raise token forever,User mistake is invalid,Invalid,
Unsatisfactory,validation-275,,Broken slippage protection while adding liquidity to uniswap,Implemented in the base contract,Invalid,
Unsatisfactory,validation-278,,Launching all the pools together can DOS the project launch,Intended design,Low quality report,
Unsatisfactory,validation-284,,Project can be DOS by creating a uniswap pool and initialize it,"Analyzer: L-5, L-16",Low quality report. Does not describes root cause.,
Unsatisfactory,validation-286,,The Approve and call functionality can fail silently,This will be only used for trusted receiver contracts btw,Invalid,
Unsatisfactory,validation-288,,Zero amount transfer may cause a denial of service.,Known issue per readme,Invalid,
Unsatisfactory,validation-291,,`ILOPool.sol` contract is not EIP-721 compliant.,Low QA on EIP compliance,Invalid. It is implemented,
Unsatisfactory,validation-295,, The `LiquidityAmounts.sol` library does not implements uniswapV3's main functions,Low QA on unneeded functions,Invalid,
Unsatisfactory,validation-296,,Smart Contract Wallets Cannot Withdraw WETH & Funds get locked,This isn't native ETH transfer,Invalid,
Unsatisfactory,validation-298,,Anyone can call function Pay,It's an internal function. PeripheryPayments is just to handle callback from uniswap v3 pool when add liquidity and pay (send) need amount of token,Invalid. Thats an internal function,
Unsatisfactory,validation-301,,Pausable Tokens like USDC can cause claimRefund to Fail,Low QA frequently reported by the bots,Invalid,
Unsatisfactory,validation-308,,Multicalling is broken ,Insufficent proof,Invalid,
Unsatisfactory,validation-309,, A blacklisted account can sidestep transfer restrictions,Logic is skipped if from != _pool,Invalid. from must be pool,
Unsatisfactory,validation-313,,An attacker can use claimRefund function in ILOPool.sol to DoS the launching of a project,It's being governed by _project.refundDeadline,Invalid. There is a refund deadline,
Unsatisfactory,validation-317,,In ChainId.sol the get function should not be pure,Inconsequential,Invalid,
Unsatisfactory,validation-32,,Incorrect Division Factor in UniswapV3Oracle in the `peek` function,95%,Invalid,
Unsatisfactory,validation-321,,The `checkWhitelist` function is not functioning correctly.,Missing out on the key leak. Mitigation would not do much to help,Invalid,
Unsatisfactory,validation-322,,Anyone can steal Admin Role by invoking `initProject()` with same input param ,"Analyzer: L-5, L-16",Clearly overinflated,
Unsatisfactory,validation-341,,Inadequate validation of `liquidityDelta` in  `buy()`.,Incorrect perception,Invalid,
Unsatisfactory,validation-346,,Malicious refunds will render the entire Pool unusable,It's being governed by _project.refundDeadline,invalid,
Unsatisfactory,validation-348,,Use call instead of transfer ,Low QA frequently reported by the bots,Low quality,
Unsatisfactory,validation-352,,Donation will result in asset loss,Incorrect assumptions,Invalid,
Unsatisfactory,validation-357,,Using average tick price method leads to incorrect price quote,Protocol design,Invalid,
Unsatisfactory,validation-358,,The whitelist admin cannot effectively control the number of whitelist accounts.,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,Invalid,
Unsatisfactory,validation-364,,Tokens contributed by accounts can be heavily inflated,Known and intended,Invalid,
Unsatisfactory,validation-376,,Wrong VULT price calculation.,Incorrect perception,Invalid,
Unsatisfactory,validation-377,,Unchecked External Call in approveAndCall,This will be only used for trusted receiver contracts btw,Invalid,
Unsatisfactory,validation-380,,TWAP might return inaccurate price.,Known and intended,Invalid,
Unsatisfactory,validation-381,,Incorrect peek Function Implementation,Incorrect perceptions,Invalid,
Unsatisfactory,validation-383,,First vest can have start bigger than end,Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,GPT,
Unsatisfactory,validation-386,,Blacklisted could be bypassed,Commonly known issue,Invalid,
Unsatisfactory,validation-387,,Set whitelist should clean the state,Inconsequantial,GPT,
Unsatisfactory,validation-389,,Loss of funds,Incorrect perception,GPT,
Unsatisfactory,validation-391,,User can bypass token amount,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,GPT,
Unsatisfactory,validation-394,,High Volatility TWAP Exploit,it will be slightly different from the actual ETH amount buyers spent,Invalid,
Unsatisfactory,validation-395,,Non-whitelisted user may buy a position if whitelist is implemented after sale start,Intended design. Low QA on uninitialized variable,Invalid,
Unsatisfactory,validation-396,,Fee overflow problem,Incorrect assumptions,GPT,
Unsatisfactory,validation-397,,Create vesting configs in the past (before sale and launch),Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,Invalid,
Unsatisfactory,validation-401,,FlashSwap to Farm Whitelist,We only add limitations for buy actions via uniswap v3 pool. Each receipient would still need to be whitlisted and cap restricted where flash activity is discouraged,Invalid,
Unsatisfactory,validation-402,,Insecure Ether Handling in `PeripheryPayments` Contract,Unlikely to happen,GPT,
Unsatisfactory,validation-404,,Max Index of Whitelist address is not enforced,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-419,,Incorrect validation of LinearVest schedules,Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,Invalid,
Unsatisfactory,validation-425,,use msg.sender instead of tx.origin in `ILOManager`,Analyzer: L-1,Invalid,
Unsatisfactory,validation-427,,use OwnerUpgradeable instead of ownable,Low QA,Invalid,
Unsatisfactory,validation-429,,User can front-run protocol fee updates and create Projects for future with old fees,"Analyzer: L-5, L-16",Invalid,
Unsatisfactory,validation-431,,Use initialize instead of constructor,Insufficient proof,Invalid,
Unsatisfactory,validation-44,,One of the token's min amount is set to 0 while adding liquidity,The min amount will be 0 too,Invalid,
Unsatisfactory,validation-440,,Vultisig whitetoken functionality applies to ILOPool and will eventualy DoS the claim() function of ILOPool contract,We only add limitations for buy actions via uniswap v3 pool,Invalid,
Unsatisfactory,validation-447,,External call (`transferFrom()`) made after Contract state has been updated in `Buy()`,It's atomic and safeTransferFrom is being adopted,Invalid,
Unsatisfactory,validation-450,,LiquidityManagement::addLiquidity has wrong price slippage check,The function will sort it out,Invalid,
Unsatisfactory,validation-454,,Project can not be launched at Launchtime,Inconsequential,Invalid,
Unsatisfactory,validation-455,,Potential out of gas error,storage saves more gas than memory in this context,Invalid,
Unsatisfactory,validation-456,, Users Can Mistakenly Send Ether to Payable claim Function,Low QA requiring user's mistake,Invalid,
Unsatisfactory,validation-457,,`initialize()` may fail due to exceed gas limit.,Low QA on OOG associated with caller controlled array length,Invalid,
Unsatisfactory,validation-463,,`ILOPool::claim` is payable and can cause locking of `ETH`,Low QA requiring user's mistake,Invalid,
Unsatisfactory,validation-466,,Use of delegatecall in a payable function inside a loop,Insufficent proof,Invalid,
Unsatisfactory,validation-467,,Incorrect deadline check in `ILOManager::claimRefund` and `ILOPool::refundable`,Insufficient proof. Working as intended,Invalid,
Unsatisfactory,validation-469,,Whitelist::setAllowedWhitelistIndex : Already whitelisted users may not be able to receive SALE tokens,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-47,,Investor can buy ILO even after pool is launched and claim tokens,User mistake. Admin should have it configured properly to prevent it from happening,Invalid,
Unsatisfactory,validation-473,,Use safeTransfer instead of transfer,Unlikely to happen,Invalid,
Unsatisfactory,validation-474,,Wrong liquidity specified when adding it to a uniswap pool,The function will sort it out,Invalid,
Unsatisfactory,validation-477,,Incorrect use of msg.sender in function approveAndCall() ,Inconsequantial,Invalid. No meta txs support in this project,
Unsatisfactory,validation-479,,An attacker can drain funds from the protocol by causing abi.decode function to revert and consume a very significant amount of gas.,Insufficient proof,Invalid,
Unsatisfactory,validation-488,,A malicious user can use both the the old and the new allowance in Vaultsig.sol by unfortunate transaction ordering.,Low QA frequently reported by the bots. OZ features mitigated steps that can be optionally adopted,Invalid,
Unsatisfactory,validation-49,,initILOPool can create invalid pool if ILOManager is not initialized,Low QA on unintialized variable,Invalid,
Unsatisfactory,validation-491,,User wont be able claim his funds due to wrong block.timestamp implementation.,Inconsequential change,Invalid,
Unsatisfactory,validation-495,,Unbounded loop in `multicall()` may cause dos,Low QA on caller controlled parameter,Invalid,
Unsatisfactory,validation-497,,Whitelisted users can buy more $VULT tokens although they already own over the max address cap.,it will be slightly different from the actual ETH amount buyers spent.,Invalid,
Unsatisfactory,validation-507,,More than allowed addresses can be added to `_whitelistIndex` mapping due to lack of `_allowedWhitelistIndex ` variable check.,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-508,,M-2 Anyone can call the `launch(address uniV3PoolAddress)` function.,Intended design,Invalid,
Unsatisfactory,validation-509,,Claim will always fail ,Low QA on input mistake by admin,Invalid,
Unsatisfactory,validation-51,,Unhandled return of transfer() call,Unlikely to happen,Invalid,
Unsatisfactory,validation-511,,Malicious User Can Block `launch`  by Exploiting `claimRefund`,It's being governed by _project.refundDeadline,Invalid. There is a refund deadline,
Unsatisfactory,validation-512,,User needs to submit eth to claim his rewards,Low QA requiring user's mistake,Invalid,
Unsatisfactory,validation-517,,estimatedETHAmount can return incorrect value whenever L2's are paused,This isn't Chainlink,Invalid,
Unsatisfactory,validation-520,,Funds can get stuck inside the whitelist contract ,Low QA frequently reported by the bots,Invalid,
Unsatisfactory,validation-524,,Muldiv will fail if performancefee is set to 0,Low QA on input mistake by admin,Invalid,
Unsatisfactory,validation-527,,NFT does not get burned after refund,Incorrect perceptions,Lack of clear security impact description,
Unsatisfactory,validation-528,,Whitelist address index can be set to more than max allowed index.,Low QA as it can queue for _allowedWhitelistIndex to increase to offset blacklistCount ,Invalid,
Unsatisfactory,validation-529,,Use unchecked in OracleLibrary.sol#consult ,conditional is in place to prevent impractical over/under flow. unchecked applies only to Solidity 8,Invalid,
Unsatisfactory,validation-532,,"Gas consumption in _unlockedLiquidity function in the ILOpool could exceed block gas limit, Locking User Funds forever",Low QA on OOG,GPT,
Unsatisfactory,validation-535,,User can frontrun launch by claimrefund whenever an L2 pauses,Intended design. It's being governed by _project.refundDeadline,Invalid,
Unsatisfactory,validation-538,,# [H-1] CREATE2 deployments can have ILOPool drained by Attacker,Unlikely to happen,Invalid,
Unsatisfactory,validation-540,,Wrong Implementation May Lead to Wrong Accounting for token totalSupply() in mint during launch,Incorrect perception. No user minting during launch,Invalid,
Unsatisfactory,validation-549,,Calling the claim function with multiple ETH deposits will use the same msg.value many times,Insufficent proof,Invalid,
Unsatisfactory,validation-556,,Small buy can round down to zero liquidity,Scaled by _vestingConfigs[0].shares,Invalid,
Unsatisfactory,validation-557,,Incorrect Refund amount  Calculation  Due to Token Price Variability in ILOPool Contract,Incorrect perceptions,Invalid,
Unsatisfactory,validation-559,,An attacker can set the `launchTime` of a project to > 100 years in the future to grief all investors and lock their funds,Project admin should be trusted,Invalid,
Unsatisfactory,validation-561,,Rounding Down to Zero Allows Users to Bypass `_maxAddressCap` Limit,Scaled by quotedWETHAmount,Invalid,
Unsatisfactory,validation-562,,[M-1] Potential Denial-of-Service (DoS) Vulnerability via Large extraData Parameter in approveAndCall Function,This will be only used for trusted receiver contracts btw,Invalid. User can choose another spender,
Unsatisfactory,validation-564,,"`Vultisig.approveAndCall(address,uint256,bytes)` is susceptible to gas griefing",This will be only used for trusted receiver contracts btw,Invalid. User can choose another spender,
Unsatisfactory,validation-57,,User's contributed amount does not account for when they sell,We only add limitations for buy actions via uniswap v3 pool,Invalid,
Unsatisfactory,validation-573,,INVESTORS WHO CALL `claimRefund()` first will lose their liquidity along,Incorrect perceptions,Invalid,
Unsatisfactory,validation-575,,Missing virtual Keyword in VultisigWhitelisted::_beforeTokenTransfer Override as per the Rules of Hooks,Unneeded,Invalid,
Unsatisfactory,validation-585,,When minting a new positionn in active pools it will allow for frontrunning,Commonly known issue,Invalid,
Unsatisfactory,validation-592,,Hash Collision in `initILOPool` Function,Extremely unlikely,Invalid,
Unsatisfactory,validation-620,,Slippage is not fully implemented in `ILOPool.launch()`,Implemented in teh base contract,Invalid,
Unsatisfactory,validation-621,,"## [M-2] Different sales token can be specified, which breaks the protocol invariant","Analyzer: L-5, L-16. Admin is trusted",Invalid,
Unsatisfactory,validation-631,,Native currency can be transferred by mistake on the claim function,Low QA requiring user's mistake,Invalid,
Unsatisfactory,validation-639,,"`ILOPool::launch`  does not follow CEI, and is vulnerable to reentrancy attacks.",It's a manager call,Invalid,
Unsatisfactory,validation-64,,Address blacklist is ineffective if self-whitelisting has been enabled,Still effective when buying,Invalid,
Unsatisfactory,validation-643,,Malicious project admin can scam legitimate vestors,Admin is trusted,Invalid,
Unsatisfactory,validation-646,,State-Effects issue in the ILOPool.launch function leading to an reentrancy exit for shareholders who bough lp using a contract that listens to erc721 tx's.,Incorrect assumptions,Invalid,
Unsatisfactory,validation-647,,# [M-3] Projects unable to deploy with certain `poolKey`,Unlikely to happen,Invalid,
Unsatisfactory,validation-652,,ILOManager owner can prevent refunds from any project's ILOPools indefinitely,Project admin should be trusted on boundary limits,Invalid,
Unsatisfactory,validation-654,,Lack of a rebalance function makes an ILOPool miss out on potential fees from Uniswap.,Insufficient proof. pool.positions(positionKey) furnishes fee growth per unit of liquidity as of the last update to liquidity or fees owed,Invalid,
Unsatisfactory,validation-657,,Specific numbers of `_vestingConfigs.length` and `projectConfig.schedule.length` might make a project unlaunchable,Low QA on OOG associated with caller controlled array length,Invalid,
Unsatisfactory,validation-661,,Invalid validation of vesting schedule,Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,Invalid,
Unsatisfactory,validation-663,,Use of delegatecall in a payable function inside a loop,Insufficent proof,Invalid,
Unsatisfactory,validation-671,,Modifier `onlyProjectAdmin()` implemented in `ILOWhitelist.sol` is empty which when used by the functions of other contracts makes the contract vulnerable.,It's an abstract contract where the modifier is implemented in its child contract ILOPool.sol,Invalid,
Unsatisfactory,validation-680,,Vulnerability in Enforcing _maxAddressCap Due to Front-Running,Commonly known issue,Invalid,
Unsatisfactory,validation-7,,Insecure Oracle Manipulation Leading to Incorrect Contribution Tracking,Circumvented by the ternary: uint32 period = PERIOD < longestPeriod ? PERIOD : longestPeriod,GPT,
Unsatisfactory,validation-70,,"`ILOManager` don't have upper cap for `PLATFORM_FEE` and `PERFORMANCE_FEE` , Which can be used to rug pull users",Low QA on boundary checks,Extremely overinflated,
Unsatisfactory,validation-78,,Blacklisted Addresses Can Self-Whitelist,Inconsequential,Invalid,
Unsatisfactory,validation-79,,Lack Of Address removal Capabilty in Whitelist,Inconsequential,Invalid,
Unsatisfactory,validation-80,,User can contribute ~5% above the maximum wallet contribution,it will be slightly different from the actual ETH amount buyers spent,Invalid,
Unsatisfactory,validation-86,,Critical privilages are transferred in one step instead of two,Similar to L-2 from Analyzer,Invalid,
Unsatisfactory,validation-92,,Ownable is not initialised ,Insufficient proof,Invalid,
Unsatisfactory,validation-93,,Ownable contract not initialised,Insufficient proof,Invalid,
Unsatisfactory,validation-96,,"Whitelisted Addresses Late to Purchase Receive Fewer VULTs for Same ETH Paid, Potentially Leading to Gas Race and Front-running Issues",Intended design. Commonly known issue,Invalid,
Unsatisfactory,validation-101,,`launch()` cannot be called at the exact `launchTime`,Invalid,Inconsequential,
Unsatisfactory,validation-103,,Any user can launch any project,Invalid,Intended design,
Unsatisfactory,validation-105,,Lack of Balance check in uniswapV3MintCallback,Invalid,Insufficient proof,
Unsatisfactory,validation-124,,Pausable Tokens like USDC Block Critical Liquidity Management Functions in `ILOPool`,Invalid,Unlikely to happen,
Unsatisfactory,validation-139,,"Newly minted positions lack initialized fee growth values, leading to incorrect fee calculations during token claims",Invalid,No user minting at launch,
Unsatisfactory,validation-141,,Refund logic flaw in `_refundProject` function leads to excessive token transfer to project admin due to incorrect calculation of refund amount based on total `SALE_TOKEN` balance instead of tokens sold,Invalid,Incorrect perceptions,
Unsatisfactory,validation-143,,Reduntant check in `_validateSharesAndVests()` may cause a revert,Invalid,Incorrect perceptions,
Unsatisfactory,validation-162,,Lack of expiration timestamp  check in launch,"Invalid. Feature request, there slippage control via desired and min amounts",Insufficient proof,
Unsatisfactory,validation-17,,Approve race condition in `Vultisig`,SC rule. Invalid,Low QA frequently reported by the bots. OZ features it optionally,
Unsatisfactory,validation-175,,Missing Import for `LiquidityAmounts` Library,Invalid,It's inherited by base/LiquidityManagement.sol,
Unsatisfactory,validation-191,,ERC-165 functionality is not implemented which is a deviation from the ERC-721 spec,Invalid. It is implemented,Low QA on EIP compliance,
Unsatisfactory,validation-20,,Denial of Service (DOS) Attack on the Multicall contract,GPT,Low QA on caller controlled parameter,
Unsatisfactory,validation-204,,Incorrect slippage checking when calling `addLiquidity(),Invalid,Implemented in the base contract,
Unsatisfactory,validation-206,,`maxSaleAmount` can be bypassed,Invalid,Intended design,
Unsatisfactory,validation-215,,Cloned pools will be affected if the implementation is initialized,Invalid,"Analyzer: L-5, L-16",
Unsatisfactory,validation-216,,Liquidity is burned before fees are collected,Report is not clear to explain the root cause. Related to validation-342,Incorrect assumptions,
Unsatisfactory,validation-225,,Non-EVM addresses not supported,Invalid,Insufficient proof,
Unsatisfactory,validation-252,,user cannot call buy() immediately sale starts and when the sale is ending,Lack of impact description,Inconsequential,
Unsatisfactory,validation-290,,Use of delegatecall in a payable function inside a loop,Invalid,Insufficent proof,
Unsatisfactory,validation-294,,`ILOPool` is Non-Compliant with ERC721 Metadata Standard Limits Token Interoperability and Usability,Invalid,Low QA on compliances,
Unsatisfactory,validation-30,,Incorrect Slippage and Decimal Handling in Peek Function of UniswapV3Oracle Contract,Invalid,95%,
Unsatisfactory,validation-307,,Users can increase contributed ETH amount state to max while paying only uniswap fee,Invalid,We only add limitations for buy actions via uniswap v3 pool. Each receipient would still need to be whitlisted and cap restricted,
Unsatisfactory,validation-319,,Incorrect Fee Calculation when adding liquidity to a new and old Position : Failure to Update Fee Growth will cause a user to claim more fees than they should ,Lack of evidence,Incorrect assumptions,
Unsatisfactory,validation-324,,An approved EOA for `VULT` token will be griefed when performing transferFrom,Invalid,This will be only used for trusted receiver contracts btw,
Unsatisfactory,validation-330,,Malicious investor can steal rewards if `RAISE_TOKEN` is a token that doesn't revert on failure,Invalid,Insufficient proof,
Unsatisfactory,validation-331,,Attacker may be able to drain pool funds due to missing check if `liquidity2Claim > 0`,Lack of evidence. This issue should be clearely demonstrated via PoC,Incorrect assumptions,
Unsatisfactory,validation-334,,"Once refund is triggered, no one else can receive refunds",Invalid. There is a refund deadline,Incorrect perceptions,
Unsatisfactory,validation-335,,Self-whitelisting allows users to bypass `_maxAddressCap` of 3 ETH,Invalid,Intended design. Owner can increase allowedWhitelistedIndex by blacklistedCount,
Unsatisfactory,validation-340,,"Only whitelisted addresses can invest in projects, despite project admin's intention to allow anyone to invest",Invalid,Intended design,
Unsatisfactory,validation-343,,Projects are incompatible with USDT,Invalid,No approval needed,
Unsatisfactory,validation-344,,"If pausable token is used, pool funds may be locked forever",Invalid,Unlikely to happen,
Unsatisfactory,validation-347,,Wrong Total Liquidity Locked for Vest is Updated When Investor buys ILO after Claim has been Initially Made in Contract,Invalid,Unlikely to happen,
Unsatisfactory,validation-354,,Admin or User Would be Denialed the Ability to Claim Refund,Invalid,Incorrect perceptions,
Unsatisfactory,validation-362,,A malicious actor could deposit miniscule `raiseAmount` and mint an `nft` (open a position) for any arbitrary `recipient`,Invalid,Infeasible because recipient is whitelisted,
Unsatisfactory,validation-37,,Tokens are transferable during `locked` state,Invalid,We only add limitations for buy actions via uniswap v3 pool,
Unsatisfactory,validation-38,,`_maxAddressCap` can be exceeded,Invalid,Intended design,
Unsatisfactory,validation-398,,Platform and Performance Fees can be set to 100% or more denying investors of earned fees.,Invalid,LowQA on admin input parameter error,
Unsatisfactory,validation-40,,Lack of sanity check for vesting `endTime`,Invalid,Working as intended as circumvented by lastEnd. Project admin should not commit such mistakes,
Unsatisfactory,validation-405,,"""call()"" should be used instead of ""transfer()""",Invalid,Low QA frequently reported by the bots,
Unsatisfactory,validation-407,,Incomplete Fee Deduction in `claim()` Function,Invalid,Incorrect assumptions,
Unsatisfactory,validation-412,,"wrong implement of ""checkWhitelist""",Low quality,Insufficient proof,
Unsatisfactory,validation-416,,Potential ETH Lockup in Whitelist Contract Due to Insufficient Gas Forwarding with `transfer()`,Invalid. Funds are not lost,Low QA frequently reported by the bots,
Unsatisfactory,validation-428,,Oracles are vulnerable to cross-chain replay attacks,Low Quality,Unlikely to happen,
Unsatisfactory,validation-437,,"""claimRefund"" can be overflow ",Low Quality,Simple logic entailed,
Unsatisfactory,validation-465,,Claim function has a  incorrectly added payable modifier,Invalid,Low QA on use input mistake,
Unsatisfactory,validation-54,,Incorrect calculation in the FullMath contract,GPT,Incorrect assumptions,
Unsatisfactory,validation-563,,Approved spender may halt liquidity claiming by calling `claimRefund()` which may conflict with `tokenOwner`'s intentions,Invalid,Incorrect perceptions,
Unsatisfactory,validation-576,,Incorrect refund mechanism in `claimRefund()`,Invalid,Intended design,
Unsatisfactory,validation-581,,Unsolicited ETH Transfer in Whitelist Function can Lead to Whitelisted Abusers and Lost Funds,Invalid. Funds are not lost,Low QA frequently reported by the bots,
Unsatisfactory,validation-582,,"wrong implement of ""_disableInitialize()""  in initializable.sol",Low quality,"When using cloning, the constructor of the implementation contract is not executed for the clone, meaning _initialized remains false unless explicitly set.",
Unsatisfactory,validation-583,,Inaccurate Token Unit Conversion in Whitelist.sol Leads to Miscalculated ETH Value,GPT,Scaled by quotedWETHAmount,
Unsatisfactory,validation-587,,"5% Slippage Misapplied, Causing Significant Price Discrepancy",GPT. Invalid,Inconsequantial change,
Unsatisfactory,validation-589,,Address Order Causing Discrepancies in Calculated Quote Amounts,GPT,Insufficient proof,
Unsatisfactory,validation-59,,Rounding errors due to division in the LiquidityAmounts contract,GPT,Unlikely to happen,
Unsatisfactory,validation-591,, Inaccurate Time-Weighted Average Tick Calculation Due to Uneven Updates,GPT,Protocol design,
Unsatisfactory,validation-593,,Inaccurate Age Reporting in getOldestObservationSecondsAgo for Pools with Cardinality 1,GPT,Insufficient proof,
Unsatisfactory,validation-594,,UniswapV3 Oracle Misidentifies Oldest Observation During Pool Expansion,GPT,Insufficient proof,
Unsatisfactory,validation-596,,getTickAtSqrtRatio Returns One Tick Too High Due to Incorrect Logic,GPT,Insufficient proof,
Unsatisfactory,validation-599,,_initUniV3PoolIfNecessary Might Cause Problems by Re-initializing Pools,GPT,Intended design,
Unsatisfactory,validation-60,,Rounding errors during division operator in the SqrtPriceMathPartial contract,GPT,Unlikely to happen,
Unsatisfactory,validation-602,, Flawed Refund Logic in ILOPool Launch Risks Excessive SALE_TOKEN Transfer to Project Admin,Invalid,Incorrect perceptions,
Unsatisfactory,validation-604,,"ILOPool Claim Function Miscalculates Fees, Shorting Users on Claimed Tokens",Invalid,Incorrect assumptions,
Unsatisfactory,validation-606,,Uninitialized Token ID in ILOPool Buy Function Can Lead to Data Inconsistencies,Invalid,"Token ID is meant to be minted, NOT initialized",
Unsatisfactory,validation-607,,ILOPool Buy Function Can Misattribute Investor Contributions Across Sales,Invalid,Transfer the other to another controlled address then,
Unsatisfactory,validation-610,,ILOPool Pool Initialization Logic Might Corrupt Existing Uniswap v3 Pool Data,Invalid,Intended design,
Unsatisfactory,validation-650,,Sequencer status is not checked on L2 Chains,GPT,Low QA frequently reported by the bots,
Unsatisfactory,validation-659,, Incorrect Slippage Adjustment in peek Function,Invalid,Inconsequantial change,
Unsatisfactory,validation-664,,Blocklist Token Disruption in Liquidity Management Contract Leads to Transaction Failures and Gas Losses,GPT,Not the protocol responsibility,
Unsatisfactory,validation-665,,Potential for Funds to be Stuck in Contract Due to Inaccurate User Refund Mechanism,GPT,Incorrect perceptions,
Unsatisfactory,validation-677,,Reentrancy in the function claim(,Invalid,Insufficient proof. CEI already in place,
Unsatisfactory,validation-82,,`refundDeadline` is not checked when launching a pool,Invalid,Intended design. User can always trigger refund before launch if need be,